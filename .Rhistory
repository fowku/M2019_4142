}
}
print(subsetDataFrame(gapminder, , 1:3, mean))
# Subset data by rows and columns, execute calculations for columns.
# Returns list of subsetted dataframe and column calculated list
subsetDataFrame <- function(dataFrame, rowSelection, columnSelection, calculationFunction = sum) {
subsettedDataFrame <- dataFrame[rowSelection, columnSelection]
listSubsettedDataFrame <- subsettedDataFrame
return( list(subsettedDataFrame, lapply( subsettedDataFrame, function(x) {calculateColumn(x, calculationFunction)} ) ) )
}
# Calculates sum for numerical columns, and frequency table for strings
calculateColumn <- function(element, calculationFunction) {
print(class(element))
if (class(element) == 'numeric') {
return(calculationFunction(matrix(element)))
}
if (class(element) == 'character' || class(element) == 'logical' || class(element) == 'factor') {
return(table(element))
}
}
print(subsetDataFrame(gapminder, , 1:3, sum))
# Subset data by rows and columns, execute calculations for columns.
# Returns list of subsetted dataframe and column calculated list
subsetDataFrame <- function(dataFrame, rowSelection, columnSelection, calculationFunction = sum) {
subsettedDataFrame <- dataFrame[rowSelection, columnSelection]
listSubsettedDataFrame <- subsettedDataFrame
return( list(subsettedDataFrame, lapply( subsettedDataFrame, function(x) {calculateColumn(x, calculationFunction)} ) ) )
}
# Calculates sum for numerical columns, and frequency table for strings
calculateColumn <- function(element, calculationFunction) {
print(class(element))
if (class(element) == 'numeric') {
return(calculationFunction(matrix(element)))
}
if (class(element) == 'character' || class(element) == 'logical' || class(element) == 'factor') {
return(table(element))
}
}
print(subsetDataFrame(gapminder, , 1:3, sum))
# Subset data by rows and columns, execute calculations for columns.
# Returns list of subsetted dataframe and column calculated list
subsetDataFrame <- function(dataFrame, rowSelection, columnSelection, calculationFunction = sum) {
subsettedDataFrame <- dataFrame[rowSelection, columnSelection]
listSubsettedDataFrame <- subsettedDataFrame
return( list(subsettedDataFrame, lapply( subsettedDataFrame, function(x) {calculateColumn(x, calculationFunction)} ) ) )
}
# Calculates sum for numerical columns, and frequency table for strings
calculateColumn <- function(element, calculationFunction) {
print(class(element))
if (class(element) == 'numeric') {
return(calculationFunction(matrix(element)))
}
if (class(element) == 'character' || class(element) == 'logical' || class(element) == 'factor') {
return(table(element))
}
}
print(subsetDataFrame(gapminder, 1:30, 1:3, sum))
# Subset data by rows and columns, execute calculations for columns.
# Returns list of subsetted dataframe and column calculated list
subsetDataFrame <- function(dataFrame, rowSelection, columnSelection, calculationFunction = sum) {
subsettedDataFrame <- dataFrame[rowSelection, columnSelection]
listSubsettedDataFrame <- subsettedDataFrame
return( list(subsettedDataFrame, lapply( subsettedDataFrame, function(x) {calculateColumn(x, calculationFunction)} ) ) )
}
# Calculates sum for numerical columns, and frequency table for strings
calculateColumn <- function(element, calculationFunction) {
if (class(element) == 'numeric') {
print(element)
print(matrix(element))
return(calculationFunction(matrix(element)))
}
if (class(element) == 'character' || class(element) == 'logical' || class(element) == 'factor') {
return(table(element))
}
}
print(subsetDataFrame(gapminder, 1:30, 1:3, sum))
# Subset data by rows and columns, execute calculations for columns.
# Returns list of subsetted dataframe and column calculated list
subsetDataFrame <- function(dataFrame, rowSelection, columnSelection, calculationFunction = sum) {
subsettedDataFrame <- dataFrame[rowSelection, columnSelection]
listSubsettedDataFrame <- subsettedDataFrame
return( list(subsettedDataFrame, lapply( subsettedDataFrame, function(x) {calculateColumn(x, calculationFunction)} ) ) )
}
# Calculates sum for numerical columns, and frequency table for strings
calculateColumn <- function(element, calculationFunction) {
if (class(element) == 'numeric') {
print('AAAAA', element)
print('BBBBB', matrix(element))
return(calculationFunction(matrix(element)))
}
if (class(element) == 'character' || class(element) == 'logical' || class(element) == 'factor') {
return(table(element))
}
}
print(subsetDataFrame(gapminder, 1:30, 1:3, sum))
# Subset data by rows and columns, execute calculations for columns.
# Returns list of subsetted dataframe and column calculated list
subsetDataFrame <- function(dataFrame, rowSelection, columnSelection, calculationFunction = sum) {
subsettedDataFrame <- dataFrame[rowSelection, columnSelection]
listSubsettedDataFrame <- subsettedDataFrame
return( list(subsettedDataFrame, lapply( subsettedDataFrame, function(x) {calculateColumn(x, calculationFunction)} ) ) )
}
# Calculates sum for numerical columns, and frequency table for strings
calculateColumn <- function(element, calculationFunction) {
if (class(element) == 'numeric') {
print('AAAAA', element)
print('BBBBB', matrix(element))
return(calculationFunction(matrix(element)))
}
if (class(element) == 'character' || class(element) == 'logical' || class(element) == 'factor') {
return(table(element))
}
}
print(subsetDataFrame(gapminder, 1:30, 1:5, sum))
# Subset data by rows and columns, execute calculations for columns.
# Returns list of subsetted dataframe and column calculated list
subsetDataFrame <- function(dataFrame, rowSelection, columnSelection, calculationFunction = sum) {
subsettedDataFrame <- dataFrame[rowSelection, columnSelection]
listSubsettedDataFrame <- subsettedDataFrame
return( list(subsettedDataFrame, lapply( subsettedDataFrame, function(x) {calculateColumn(x, calculationFunction)} ) ) )
}
# Calculates sum for numerical columns, and frequency table for strings
calculateColumn <- function(element, calculationFunction) {
if (class(element) == 'numeric') {
return(calculationFunction(matrix(element)))
}
if (class(element) == 'character' || class(element) == 'logical' || class(element) == 'factor') {
return(table(element))
}
}
print(subsetDataFrame(gapminder, 1:30, 1:5, sum))
# Subset data by rows and columns, execute calculations for columns.
# Returns list of subsetted dataframe and column calculated list
subsetDataFrame <- function(dataFrame, rowSelection, columnSelection) {
subsettedDataFrame <- dataFrame[rowSelection, columnSelection]
return(list(subsettedDataFrame, calculateColumns(subsettedDataFrame)))
}
# Calculates sum for numerical columns, and frequency table for strings
calculateColumns <- function(dataFrame) {
calculatedResult <- list()
for (column in names(dataFrame)) {
if (class(dataFrame[[column]]) == 'numeric') {
calculatedResult[[column]] <- sum(dataFrame[[column]])
next
}
if (class(dataFrame[[column]]) == 'character' || class(dataFrame[[column]]) == 'logical' || class(dataFrame[[column]]) == 'factor') {
calculatedResult[[column]] <- table(dataFrame[[column]])
next
}
}
return(calculatedResult)
}
print(subsetDataFrame(gapminder, 1:30, 1:5))
# Subset data by rows and columns, execute calculations for columns.
# Returns list of subsetted dataframe and column calculated list
subsetDataFrame <- function(dataFrame, rowSelection, columnSelection, calculationFunction = sum) {
subsettedDataFrame <- dataFrame[rowSelection, columnSelection]
listSubsettedDataFrame <- subsettedDataFrame
return( list(subsettedDataFrame, sapply( subsettedDataFrame, function(x) {calculateColumn(x, calculationFunction)} ) ) )
}
# Calculates sum for numerical columns, and frequency table for strings
calculateColumn <- function(element, calculationFunction) {
if (class(element) == 'numeric') {
return(calculationFunction(matrix(element)))
}
if (class(element) == 'character' || class(element) == 'logical' || class(element) == 'factor') {
return(table(element))
}
}
print(subsetDataFrame(gapminder, 1:30, 1:5, sum))
library(tidyr)
weather <- readRDS("weather.rds")
weather <- readRDS("/weather.rds")
weather <- readRDS("./weather.rds")
weather <- readRDS("weather.rds")
library(dbplyr)
library(gapminder)
library(tidyr)
# Subset data by rows and columns, execute calculations for columns.
# Returns list of subsetted dataframe and column calculated list
subsetDataFrame <- function(dataFrame, rowSelection, columnSelection) {
subsettedDataFrame <- dataFrame[rowSelection, columnSelection]
return(list(subsettedDataFrame, calculateColumns(subsettedDataFrame)))
}
# Calculates sum for numerical columns, and frequency table for strings
calculateColumns <- function(dataFrame) {
calculatedResult <- list()
for (column in names(dataFrame)) {
if (class(dataFrame[[column]]) == 'numeric') {
calculatedResult[[column]] <- sum(dataFrame[[column]])
next
}
if (class(dataFrame[[column]]) == 'character' || class(dataFrame[[column]]) == 'logical' || class(dataFrame[[column]]) == 'factor') {
calculatedResult[[column]] <- table(dataFrame[[column]])
next
}
}
return(calculatedResult)
}
print(subsetDataFrame(gapminder, 1:30, 1:5))
# Subset data by rows and columns, execute calculations for columns.
# Returns list of subsetted dataframe and column calculated list
subsetDataFrame <- function(dataFrame, rowSelection, columnSelection) {
subsettedDataFrame <- dataFrame[rowSelection, columnSelection]
return(list(subsettedDataFrame, calculateColumns(subsettedDataFrame)))
}
# Calculates sum for numerical columns, and frequency table for strings
calculateColumns <- function(dataFrame) {
calculatedResult <- list()
for (column in names(dataFrame)) {
if (class(dataFrame[[column]]) == 'numeric' || 'int') {
calculatedResult[[column]] <- sum(dataFrame[[column]])
next
}
if (class(dataFrame[[column]]) == 'character' || class(dataFrame[[column]]) == 'logical' || class(dataFrame[[column]]) == 'factor') {
calculatedResult[[column]] <- table(dataFrame[[column]])
next
}
}
return(calculatedResult)
}
print(subsetDataFrame(gapminder, 1:30, 1:5))
# Subset data by rows and columns, execute calculations for columns.
# Returns list of subsetted dataframe and column calculated list
subsetDataFrame <- function(dataFrame, rowSelection, columnSelection) {
subsettedDataFrame <- dataFrame[rowSelection, columnSelection]
return(list(subsettedDataFrame, calculateColumns(subsettedDataFrame)))
}
# Calculates sum for numerical columns, and frequency table for strings
calculateColumns <- function(dataFrame) {
calculatedResult <- list()
for (column in names(dataFrame)) {
if (class(dataFrame[[column]]) == 'numeric' || class(dataFrame[[column]]) == 'int') {
calculatedResult[[column]] <- sum(dataFrame[[column]])
next
}
if (class(dataFrame[[column]]) == 'character' || class(dataFrame[[column]]) == 'logical' || class(dataFrame[[column]]) == 'factor') {
calculatedResult[[column]] <- table(dataFrame[[column]])
next
}
}
return(calculatedResult)
}
print(subsetDataFrame(gapminder, 1:30, 1:5))
# Subset data by rows and columns, execute calculations for columns.
# Returns list of subsetted dataframe and column calculated list
subsetDataFrame <- function(dataFrame, rowSelection, columnSelection) {
subsettedDataFrame <- dataFrame[rowSelection, columnSelection]
return(list(subsettedDataFrame, calculateColumns(subsettedDataFrame)))
}
# Calculates sum for numerical columns, and frequency table for strings
calculateColumns <- function(dataFrame) {
calculatedResult <- list()
print(class(dataFrame[[pop]]))
for (column in names(dataFrame)) {
if (class(dataFrame[[column]]) == 'numeric' || class(dataFrame[[column]]) == 'int') {
calculatedResult[[column]] <- sum(dataFrame[[column]])
next
}
if (class(dataFrame[[column]]) == 'character' || class(dataFrame[[column]]) == 'logical' || class(dataFrame[[column]]) == 'factor') {
calculatedResult[[column]] <- table(dataFrame[[column]])
next
}
}
return(calculatedResult)
}
print(subsetDataFrame(gapminder, 1:30, 1:5))
# Subset data by rows and columns, execute calculations for columns.
# Returns list of subsetted dataframe and column calculated list
subsetDataFrame <- function(dataFrame, rowSelection, columnSelection) {
subsettedDataFrame <- dataFrame[rowSelection, columnSelection]
return(list(subsettedDataFrame, calculateColumns(subsettedDataFrame)))
}
# Calculates sum for numerical columns, and frequency table for strings
calculateColumns <- function(dataFrame) {
calculatedResult <- list()
print(class(dataFrame[['pop']]))
for (column in names(dataFrame)) {
if (class(dataFrame[[column]]) == 'numeric' || class(dataFrame[[column]]) == 'int') {
calculatedResult[[column]] <- sum(dataFrame[[column]])
next
}
if (class(dataFrame[[column]]) == 'character' || class(dataFrame[[column]]) == 'logical' || class(dataFrame[[column]]) == 'factor') {
calculatedResult[[column]] <- table(dataFrame[[column]])
next
}
}
return(calculatedResult)
}
print(subsetDataFrame(gapminder, 1:30, 1:5))
# Subset data by rows and columns, execute calculations for columns.
# Returns list of subsetted dataframe and column calculated list
subsetDataFrame <- function(dataFrame, rowSelection, columnSelection) {
subsettedDataFrame <- dataFrame[rowSelection, columnSelection]
return(list(subsettedDataFrame, calculateColumns(subsettedDataFrame)))
}
# Calculates sum for numerical columns, and frequency table for strings
calculateColumns <- function(dataFrame) {
calculatedResult <- list()
for (column in names(dataFrame)) {
if (class(dataFrame[[column]]) == 'numeric' || class(dataFrame[[column]]) == 'integer') {
calculatedResult[[column]] <- sum(dataFrame[[column]])
next
}
if (class(dataFrame[[column]]) == 'character' || class(dataFrame[[column]]) == 'logical' || class(dataFrame[[column]]) == 'factor') {
calculatedResult[[column]] <- table(dataFrame[[column]])
next
}
}
return(calculatedResult)
}
print(subsetDataFrame(gapminder, 1:30, 1:5))
# Subset data by rows and columns, execute calculations for columns.
# Returns list of subsetted dataframe and column calculated list
subsetDataFrame <- function(dataFrame, rowSelection, columnSelection) {
subsettedDataFrame <- dataFrame[rowSelection, columnSelection]
return(list(subsettedDataFrame, calculateColumns(subsettedDataFrame)))
}
# Calculates sum for numerical columns, and frequency table for strings
calculateColumns <- function(dataFrame) {
calculatedResult <- list()
for (column in names(dataFrame)) {
if (class(dataFrame[[column]]) == 'numeric' || class(dataFrame[[column]]) == 'integer') {
calculatedResult[[column]] <- sum(dataFrame[[column]])
next
}
if (class(dataFrame[[column]]) == 'character' || class(dataFrame[[column]]) == 'logical' || class(dataFrame[[column]]) == 'factor') {
calculatedResult[[column]] <- table(dataFrame[[column]])
next
}
}
return(calculatedResult)
}
print(subsetDataFrame(gapminder, 1, 1:5))
# Subset data by rows and columns, execute calculations for columns.
# Returns list of subsetted dataframe and column calculated list
subsetDataFrame <- function(dataFrame, rowSelection, columnSelection) {
subsettedDataFrame <- dataFrame[rowSelection, columnSelection]
return(list(subsettedDataFrame, calculateColumns(subsettedDataFrame)))
}
# Calculates sum for numerical columns, and frequency table for strings
calculateColumns <- function(dataFrame) {
calculatedResult <- list()
for (column in names(dataFrame)) {
if (class(dataFrame[[column]]) == 'numeric' || class(dataFrame[[column]]) == 'integer') {
calculatedResult[[column]] <- sum(dataFrame[[column]])
next
}
if (class(dataFrame[[column]]) == 'character' || class(dataFrame[[column]]) == 'logical' || class(dataFrame[[column]]) == 'factor') {
calculatedResult[[column]] <- table(dataFrame[[column]])
next
}
}
return(calculatedResult)
}
print(subsetDataFrame(gapminder, 1:30, 1))
# Subset data by rows and columns, execute calculations for columns.
# Returns list of subsetted dataframe and column calculated list
subsetDataFrame <- function(dataFrame, rowSelection, columnSelection, calculationFunction = sum) {
subsettedDataFrame <- dataFrame[rowSelection, columnSelection]
listSubsettedDataFrame <- subsettedDataFrame
return( list(subsettedDataFrame, sapply( subsettedDataFrame, function(x) {calculateColumn(x, calculationFunction)} ) ) )
}
# Calculates sum for numerical columns, and frequency table for strings
calculateColumn <- function(element, calculationFunction) {
print(element)
print(matrix(element))
if (class(element) == 'numeric') {
return(calculationFunction(matrix(element)))
}
if (class(element) == 'character' || class(element) == 'logical' || class(element) == 'factor') {
return(table(element))
}
}
# print(subsetDataFrame(gapminder, 1:30, 1:5, sum))
subsetDataFrame(gapminder, 1:30, 1:5, sum)
# Subset data by rows and columns, execute calculations for columns.
# Returns list of subsetted dataframe and column calculated list
subsetDataFrame <- function(dataFrame, rowSelection, columnSelection, calculationFunction = sum) {
subsettedDataFrame <- dataFrame[rowSelection, columnSelection]
listSubsettedDataFrame <- subsettedDataFrame
return( list(subsettedDataFrame, sapply( subsettedDataFrame, function(x) {calculateColumn(x, calculationFunction)} ) ) )
}
# Calculates sum for numerical columns, and frequency table for strings
calculateColumn <- function(element, calculationFunction) {
print(element)
print('---------------------')
print(matrix(element))
if (class(element) == 'numeric') {
return(calculationFunction(matrix(element)))
}
if (class(element) == 'character' || class(element) == 'logical' || class(element) == 'factor') {
return(table(element))
}
}
# print(subsetDataFrame(gapminder, 1:30, 1:5, sum))
subsetDataFrame(gapminder, 1:30, 1:5, sum)
# Subset data by rows and columns, execute calculations for columns.
# Returns list of subsetted dataframe and column calculated list
subsetDataFrame <- function(dataFrame, rowSelection, columnSelection, calculationFunction = sum) {
subsettedDataFrame <- dataFrame[rowSelection, columnSelection]
listSubsettedDataFrame <- subsettedDataFrame
return( list(subsettedDataFrame, sapply( subsettedDataFrame, function(x) {calculateColumn(x, calculationFunction)} ) ) )
}
# Calculates sum for numerical columns, and frequency table for strings
calculateColumn <- function(element, calculationFunction) {
print('ELEMENT')
print(element)
print('---------------------')
print('MATRIX')
print(matrix(element))
if (class(element) == 'numeric') {
return(calculationFunction(matrix(element)))
}
if (class(element) == 'character' || class(element) == 'logical' || class(element) == 'factor') {
return(table(element))
}
}
# print(subsetDataFrame(gapminder, 1:30, 1:5, sum))
subsetDataFrame(gapminder, 1:30, 1:5, sum)
install.packages("rmarkdown")
weather <- readRDS("weather.rds")
weather1 <- select (weather, -X)
names(weather1)[4:34] <- '1':'31'
weather2 <- gather(weather1, key = day, value = val, '1' : '31')
weather3 <- unite(weather2, col = y_m_d, year, month, day)
weather4 <- spread(weather3, key = measure, value = val)
weather5 <- weather4[order(weather4$y_m_d),]
weather6 <- na.omit(weather5)
weather <- readRDS("weather.rds")
weather1 <- select (weather, -X)
names(weather1)[4:34] <- '1':'31'
weather2 <- gather(weather1, key = day, value = val, '1' : '31')
weather3 <- unite(weather2, col = y_m_d, year, month, day)
weather4 <- spread(weather3, key = measure, value = val)
weather5 <- weather4[order(weather4$y_m_d),]
weather6 <- na.omit(weather5)
# weather <- readRDS("weather.rds")
weather1 <- select (weather, -X)
names(weather1)[4:34] <- '1':'31'
weather2 <- gather(weather1, key = day, value = val, '1' : '31')
weather3 <- unite(weather2, col = y_m_d, year, month, day)
weather4 <- spread(weather3, key = measure, value = val)
weather5 <- weather4[order(weather4$y_m_d),]
weather6 <- na.omit(weather5)
weather <- readRDS("/weather.rds")
weather1 <- select (weather, -X)
names(weather1)[4:34] <- '1':'31'
weather2 <- gather(weather1, key = day, value = val, '1' : '31')
weather3 <- unite(weather2, col = y_m_d, year, month, day)
weather4 <- spread(weather3, key = measure, value = val)
weather5 <- weather4[order(weather4$y_m_d),]
weather6 <- na.omit(weather5)
weather <- readRDS("weather.rds")
weather1 <- select (weather, -X)
names(weather1)[4:34] <- '1':'31'
weather2 <- gather(weather1, key = day, value = val, '1' : '31')
weather3 <- unite(weather2, col = y_m_d, year, month, day)
weather4 <- spread(weather3, key = measure, value = val)
weather5 <- weather4[order(weather4$y_m_d),]
weather6 <- na.omit(weather5)
knitr::opts_chunk$set(echo = TRUE)
kable(ourResult[1:9])
kable(ourResult[1:9])
weather <- readRDS("weather.rds")
# Удаляем первый бесполезный столбец
weather1 <- select (weather, -X)
# Переименовываем стобцы дней в человеческий вид (из X1, X2, X3... -> в 1, 2, 3...)
names(weather1)[4:34] <- '1':'31'
#
weather2 <- gather(weather1, key = day, value = val, '1' : '31')
weather3 <- unite(weather2, col = y_m_d, year, month, day)
weather4 <- spread(weather3, key = measure, value = val)
weather5 <- weather4[order(weather4$y_m_d),]
weather6 <- na.omit(weather5)
setwd("~/Desktop/M2019_4142")
weather <- readRDS("weather.rds")
# Удаляем первый бесполезный столбец
weather1 <- select (weather, -X)
# Переименовываем стобцы дней в человеческий вид (из X1, X2, X3... -> в 1, 2, 3...)
names(weather1)[4:34] <- '1':'31'
#
weather2 <- gather(weather1, key = day, value = val, '1' : '31')
weather3 <- unite(weather2, col = y_m_d, year, month, day)
weather4 <- spread(weather3, key = measure, value = val)
weather5 <- weather4[order(weather4$y_m_d),]
weather6 <- na.omit(weather5)
library(dplyr)
weather <- readRDS("weather.rds")
# Удаляем первый бесполезный столбец
weather1 <- select (weather, -X)
# Переименовываем стобцы дней в человеческий вид (из X1, X2, X3... -> в 1, 2, 3...)
names(weather1)[4:34] <- '1':'31'
#
weather2 <- gather(weather1, key = day, value = val, '1' : '31')
weather3 <- unite(weather2, col = y_m_d, year, month, day)
weather4 <- spread(weather3, key = measure, value = val)
weather5 <- weather4[order(weather4$y_m_d),]
weather6 <- na.omit(weather5)
library(tidyr)
weather <- readRDS("weather.rds")
# Удаляем первый бесполезный столбец
weather1 <- select (weather, -X)
# Переименовываем стобцы дней в человеческий вид (из X1, X2, X3... -> в 1, 2, 3...)
names(weather1)[4:34] <- '1':'31'
#
weather2 <- gather(weather1, key = day, value = val, '1' : '31')
weather3 <- unite(weather2, col = y_m_d, year, month, day)
weather4 <- spread(weather3, key = measure, value = val)
weather5 <- weather4[order(weather4$y_m_d),]
weather6 <- na.omit(weather5)
View(weather2)
